version: 2.1

executors:
  cpp-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CXX: g++
      CC: gcc
      VCPKG_ROOT: /opt/vcpkg
      EMAILS_FILE: emails.csv

jobs:
  build-and-test:
    executor: cpp-executor
    steps:
      - checkout

      - run:
          name: Verify emails.csv exists
          command: |
            if [ ! -f sample_emails.csv ]; then
              echo "sample_emails.csv not found! Please ensure it's committed."
              exit 1
            fi

      - run:
          name: Install Build Tools and vcpkg
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && \
            apt-get install -y tzdata && \
            ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
            dpkg-reconfigure --frontend noninteractive tzdata && \
            apt-get install -y \
              curl zip unzip tar git cmake g++ make pkg-config \
              lcov python3 python3-pip python3-venv

            git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT
            $VCPKG_ROOT/bootstrap-vcpkg.sh

      - run:
          name: Set up Python virtualenv and install pandas
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install pandas

      - run:
          name: Install Dependencies via vcpkg
          command: |
            $VCPKG_ROOT/vcpkg install gtest cpr nlohmann-json

      - run:
          name: Clean build directory
          command: |
            rm -rf build && mkdir build

      - run:
          name: Build Project with Coverage
          command: |
            cd build
            cmake .. \
              -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_CXX_FLAGS="--coverage"
            make

      - run:
          name: Run Unit Tests
          command: |
            cd build
            mkdir -p test-results
            ctest --output-on-failure

      - run:
          name: Run End-to-End Test Binary (if compiled)
          command: |
            cd build
            if [ -f test_e2e ]; then
              ./test_e2e
            else
              echo "E2E test binary not found"
            fi

      - run:
          name: Verify End-to-End Test Output
          command: |
            cd build
            if [ -f results.csv ]; then
              echo "Results file generated successfully"
              head -n 10 results.csv
            else
              echo "Results file not found. End-to-End test failed."
              exit 1
            fi

      - run:
          name: Generate Code Coverage Report
          command: |
            cd build
            lcov --capture --directory . --output-file coverage.info --ignore-errors mismatch
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            genhtml --ignore-errors mismatch coverage.info --output-directory coverage-report

      - store_test_results:
          path: build/test-results

      - store_artifacts:
          path: build/test-results
          destination: junit

      - store_artifacts:
          path: build/coverage-report
          destination: coverage

      - store_artifacts:
          path: build/coverage.info
          destination: raw-coverage

workflows:
  version: 2
  test-and-coverage:
    jobs:
      - build-and-test
