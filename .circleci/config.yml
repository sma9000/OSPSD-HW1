version: 2.1

executors:
  cpp-executor:
    docker:
      - image: ubuntu:latest
    resource_class: small
    environment:
      CXX: g++
      CC: gcc
      VCPKG_ROOT: /opt/vcpkg

jobs:
  build-and-test:
    executor: cpp-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - vcpkg-cache

      - run:
          name: Install Build Tools and vcpkg
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -y \
              clang clang-tidy clang-format \
              curl zip unzip tar git cmake g++ make pkg-config \
              lcov

            git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT
            $VCPKG_ROOT/bootstrap-vcpkg.sh
            $VCPKG_ROOT/vcpkg install gtest cpr nlohmann-json

      - save_cache:
          key: vcpkg-cache
          paths:
            - /opt/vcpkg

      - run:
          name: Clean build directory
          command: |
            rm -rf build && mkdir build

      - run:
          name: Build Project with Coverage and Generate compile_commands.json
          command: |
            cd build
            cmake .. \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_CXX_FLAGS="--coverage"
            make || { echo "Build failed"; exit 1; }
            cp compile_commands.json ..

      - run:
          name: Run clang-tidy
          command: |
            for file in $(find include -name "*.h"); do
              echo "Running clang-tidy on $file"
              clang-tidy -p=. $file -- -Iinclude || true
            done

      # REMOVED clang-format check

      - run:
          name: Run Unit Tests
          command: |
            cd build
            mkdir -p test-results
            ctest --output-on-failure --output-junit test-results/test-results.xml

      - run:
          name: Generate Code Coverage Report
          command: |
            cd build
            lcov --capture --directory . --output-file coverage.info --ignore-errors mismatch
            lcov --remove coverage.info '/usr/*' '*/tests/*' '*/include/*' --output-file coverage.info
            genhtml --ignore-errors mismatch coverage.info --output-directory coverage-report

      - store_test_results:
          path: build/test-results

      - store_artifacts:
          path: build/test-results
          destination: junit

      - store_artifacts:
          path: build/coverage-report
          destination: coverage

workflows:
  version: 2
  test-and-coverage:
    jobs:
      - build-and-test
